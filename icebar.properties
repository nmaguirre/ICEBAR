#ICEBAR PROPERTIES FOR SIMON
#==========================

#===BEAFIX PROPERTIES===
#BeAFix jar location
icebar.tools.beafix.jar=/home/stein/Desktop/Projects/ICEBAR/BeAFix/org.alloytools.alloy/out/artifacts/AStryker/BeAFixCLI-2.8.13rc.jar

#BeAFix tests to generate
icebar.tools.beafix.tests=1

#Location for model overrides folder (used by BeAFix to swap signature/field intialization with function initialization), no value means no overridings
icebar.tools.beafix.modeloverridesfolder=

#If BeAFix will generate tests from instances (obtained by run commands with expect 1)
icebar.tools.beafix.instancetests=true

#A file listing buggy functions in a model (used by BeAFix to determine trusted and untrusted tests), no value means everything is trusted (unless mutation marks are found in the model)
icebar.tools.beafix.buggyfuncsfile=

#Enables/disables relaxed mode for BeAFix's ARepair compatibility mode
icebar.tools.beafix.compat.relaxed=true

#======

#===AREPAIR PROPERTIES===
#The root folder for ARepair, the following restrictions apply:
#1) A sat-solvers folder must exist inside the root folder containing minisat libraries
#2) A libs folder inside root containing both alloy.jar and aparser-1.0.jar
#3) A target folder inside root containing arepair-1.0-jar-with-dependencies.jar
icebar.tools.arepair.root=/home/stein/Desktop/Projects/ICEBAR/ARepair

#======

#===ICEBAR PROPERTIES===
#Number of iterations done by ICEBAR until a fix is found
icebar.laps=30

#Timeout (in minutes) for ICEBAR, a 0 value means no timeout
icebar.timeout=60

#Candidates with less violated properties will be given priority when this option is enabled
icebar.priorization=false

#Base search algorithm, either Depth First Search (DFS) or Breadth First Search (BFS)
icebar.search=DFS

#Will call BeAFix Test generation with relaxed facts (this will only be used when no tests are available)
icebar.allowrelaxedfacts=true

#Will call BeAFix Test generation forcing assertion tests (this will generate predicates from where to try and generate tests)
icebar.forceassertiontests=true

#When true, trusted tests will be shared by all candidates, when disabled, trusted tests will be local to each candidate (except from trusted tests from the original candidate)
icebar.globaltrustedtests=false

#When true, ARepair scope will be updated from the maximum scope used in the oracle (when false, this will only be done for initial tests).
icebar.updatescopefromoracle=true

#When true, ICEBAR will treat ARepair errors (specifically NullPointerExceptions) as no repair, and continue the search.
icebar.keepgoingarepairnpe=true

#When true, ICEBAR will continue with test generation if ARepair didn't find a fix, there is no more candidates in the search space, and only trusted tests have been obtained so far.
icebar.nofixonlytrustedkeepgoing=true

#When true, ICEBAR will restart the search when no more candidate are available to see if new tests can be obtained
icebar.search.emptysearchspace.retryformoretests=false

#When true, each branch will no involve repeated tests
icebar.search.filterrepeatedtests=false

#When true, ICEBAR will print a .svg file showing the repair graph (this option is incompatible with priorization)
icebar.search.printprocessgraph=true

#When true, two hashes will be used to count used tests (trusted and untrusted), when false, only generated tests will be counted and no trusted/untrusted tests will be counted.
icebar.search.printallusedtests=false

#Where to write the initial tests, at the beginning (PREPEND), or at the end (APPEND), default is (APPEND).
icebar.search.initialtests.position=APPEND
#======